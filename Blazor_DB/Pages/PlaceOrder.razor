@page "/placeOrder"
@inject NavigationManager uriHelper
@inject IJSRuntime js
@using ModelsClass
@using TablesDB
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@if(list == null)
{
    <p>Loading...</p>
}
else
{
    <div class="form-signin text-center w-50">
        <img class="mb-4" src="https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">
        <h1 class="h3 mb-3 font-weight-normal">Place Order</h1>
        <label for="my-dropdown">Select an option:</label>
        <select @bind="gem" @onselectionchange=OnInitialized id="my-dropdown" name="my-dropdown">
            @foreach (Gem item in list)
            {
                <option value="@item.gemID">@item.name</option>
            }
        </select>

        <select @onselectionchange=OnInitialized @bind ="metal" id="my-dropdown" name="Metal">
            <option value="aluminum">Aluminum</option>
            <option value="antimony">Antimony</option>
            <option value="beryllium">Beryllium</option>
            <option value="brass">Brass</option>
            <option value="bronze">Bronze</option>
            <option value="cadmium">Cadmium</option>
            <option value="copper">Copper</option>
            <option value="gold">Gold</option>
            <option value="hafnium">Hafnium</option>
            <option value="iron">Iron</option>
            <option value="lead">Lead</option>
            <option value="lithium">Lithium</option>
            <option value="magnesium">Magnesium</option>
            <option value="mercury">Mercury</option>
            <option value="nickel">Nickel</option>
            <option value="palladium">Palladium</option>
            <option value="platinum">Platinum</option>
            <option value="silver">Silver</option>
            <option value="sodium">Sodium</option>
            <option value="tantalum">Tantalum</option>
            <option value="tin">Tin</option>
            <option value="titanium">Titanium</option>
            <option value="tungsten">Tungsten</option>
            <option value="zinc">Zinc</option>
            <option value="adamantium">Adamantium</option>
            <option value="mithril">Mithril</option>
            <option value="unobtainium">Unobtainium</option>

        </select>


        <button @onclick="Add" class="btn btn-lg btn-primary btn-block m-1" type="submit">Place</button>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private string Name = "";
    private string Id;
    private Order order;
    private string gem;
    private string metal;
    private int ringID;
    private protected Customer c;
    List<Gem> list;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var customerSession = await MySession.GetAsync<Customer>("customerSession");
        if (customerSession.Success)
        {
            c = customerSession.Value;
            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("login");
        GemDB gdb = new GemDB();
        list = (List<Gem>)(gdb.SelectAll());
    }
    protected async Task Add()
    {
        RingDB rdb = new RingDB();
        Ring r = new Ring();
        OrderDB odb = new OrderDB();
        Order o = new Order();
        r.metal = metal;
        r.gemID = int.Parse(gem);
        ringID = rdb.InsertWithID(r);

        o.ringID = ringID;
        o.customerID = c.CustomerID;
        if (odb.Insert(o))
        {
            await js.InvokeVoidAsync("alert", $"Order Placed!");
            uriHelper.NavigateTo($"/details/{c.CustomerID}");
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Order Failed!");
            uriHelper.NavigateTo($"/details/{c.CustomerID}");
        }

    }
  

}